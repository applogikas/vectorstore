import weaviate
import random

# Configuration
WEAVIATE_URL = "http://localhost:8080"
COLLECTION_NAME = "Person"

def generate_ssn():
    """Generate a mock SSN in format XXX-XX-XXXX"""
    area = random.randint(100, 999)
    group = random.randint(10, 99)
    serial = random.randint(1000, 9999)
    return f"{area}-{group}-{serial}"

def generate_mock_data(num_records=5):
    """Generate mock person data"""
    first_names = ["John", "Jane", "Michael", "Sarah", "David", "Emma", "Robert", "Lisa", "James", "Mary"]
    last_names = ["Smith", "Johnson", "Williams", "Brown", "Jones", "Garcia", "Miller", "Davis", "Rodriguez", "Martinez"]
    
    mock_data = []
    for i in range(num_records):
        person = {
            "name": f"{random.choice(first_names)} {random.choice(last_names)}",
            "ssn": generate_ssn(),
            "age": random.randint(22, 65),
            "salary": round(random.uniform(30000, 150000), 2)
        }
        mock_data.append(person)
    
    return mock_data

def create_collection(client):
    """Create the Person collection with schema"""
    # Delete collection if it exists
    client.schema.delete_class(COLLECTION_NAME)
    print(f"Deleted existing '{COLLECTION_NAME}' collection (if it existed)")
    
    # Define schema
    class_schema = {
        "class": COLLECTION_NAME,
        "properties": [
            {
                "name": "name",
                "dataType": ["text"],
                "description": "Person's full name"
            },
            {
                "name": "ssn",
                "dataType": ["text"],
                "description": "Social Security Number"
            },
            {
                "name": "age",
                "dataType": ["int"],
                "description": "Person's age"
            },
            {
                "name": "salary",
                "dataType": ["number"],
                "description": "Annual salary"
            }
        ]
    }
    
    # Create collection
    client.schema.create_class(class_schema)
    print(f"Created '{COLLECTION_NAME}' collection successfully")

def insert_data(client, data):
    """Insert mock data into the collection"""
    # Configure batch
    client.batch.configure(batch_size=100)
    
    # Insert data with batch processing
    with client.batch as batch:
        for person in data:
            batch.add_data_object(
                data_object=person,
                class_name=COLLECTION_NAME
            )
    
    print(f"Inserted {len(data)} records into '{COLLECTION_NAME}' collection")

def query_data(client):
    """Query and display all data from the collection"""
    # Query all objects
    results = (
        client.query
        .get(COLLECTION_NAME, ["name", "ssn", "age", "salary"])
        .with_limit(10)
        .do()
    )
    
    print(f"\nQuerying all records from '{COLLECTION_NAME}' collection:")
    print("-" * 80)
    
    objects = results["data"]["Get"][COLLECTION_NAME]
    for i, obj in enumerate(objects, 1):
        print(f"Record {i}:")
        print(f"  Name: {obj['name']}")
        print(f"  SSN: {obj['ssn']}")
        print(f"  Age: {obj['age']}")
        print(f"  Salary: ${obj['salary']:,.2f}")
        print()

def main():
    """Main execution function"""
    print("Weaviate Person Collection Setup (v3 Client)")
    print("=" * 80)
    
    # Connect to Weaviate
    print(f"Connecting to Weaviate at {WEAVIATE_URL}...")
    client = weaviate.Client(WEAVIATE_URL)
    
    print("Connected successfully!")
    
    # Create collection
    create_collection(client)
    
    # Generate mock data
    print("\nGenerating mock data...")
    mock_data = generate_mock_data(5)
    
    # Display generated data
    print("\nGenerated mock data:")
    for i, person in enumerate(mock_data, 1):
        print(f"{i}. {person}")
    
    # Insert data
    print("\nInserting data into Weaviate...")
    insert_data(client, mock_data)
    
    # Query to verify
    query_data(client)
    
    print("\nDone!")

if __name__ == "__main__":
    main()
